# -*- coding: utf-8 -*-
"""Harin_Ethane_Phase_diagram.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PfIKBaYmGK99sI_MqY8AYe2_GwXk3GjP
"""

#phse diagram of ethane
#Author:- Harin Patoliya

import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle
import numpy as np
from scipy.optimize import curve_fit
from math import ceil
import csv
from google.colab import files

T_triple = 91 #K
P_triple = 0.000011*10**5 #Pa
T_fus = 91 #K
T_boil = 184.6 #K
T_critic = 305.3 #K
P_critic = 49*10**5 #Pa
normal_P = 101325 # Pa
normal_T = 298.15 # K
sub_enth = 20.5*10**3 # KJ/mol
R = 8.3144598

#sublimation curve

#Clausius-Clapeyron equation

def subline(temp):
    return P_triple * np.exp((-sub_enth/R)*((1/temp)-(1/T_triple)))

temp1 = np.linspace(60, T_triple, 50)
pres = subline(temp1)

plt.plot(temp1, pres)
plt.yscale('log')

#vaporline antoine equation

A = 4.50706
B = 791.3
C = -6.422

def antoineeq(temp, A, B, C):
    return (10**(A - B / (C + temp))) * 10**5

vptemp = np.linspace(T_triple, T_critic, 50)
vppres = antoineeq(vptemp, A, B, C)

plt.plot(vptemp, vppres)
plt.plot(temp1, pres)
plt.yscale('log')

initial_guess = [A, B, C]

v_pressure = [P_triple, normal_P, P_critic]                           #experimental vapor line pressure data
v_temperature = [T_triple, T_boil, T_critic]                                               #intial gause value of Antoine Eqation to reduce itteration step

value,_ = curve_fit(antoineeq, v_temperature,
                         v_pressure, p0=initial_guess, maxfev = 8000)    #curvefitting

A_fit, B_fit, C_fit = value                                              #extraction of suitable value of antoine parameters from curve fitting



temperature_fit = np.linspace(T_triple, T_critic, 100)
pressure_fit = antoineeq(temperature_fit, A_fit, B_fit, C_fit)

plt.plot(temperature_fit, pressure_fit)
#plt.plot(vptemp, vppres)
plt.plot(temp1, pres)
plt.yscale('log')

#meltingline

def meltline(temp):
    n1 = 2.23626315 * 10**8
    n2 = 1.05262374 * 10**8
    return P_triple * (1 + n1*((temp/T_triple) - 1) + n2*((temp/T_triple)**2.55 - 1))

mel_temp = np.linspace(T_triple, 1.2 * T_triple, 50)
mel_pres = meltline(mel_temp)

plt.plot(mel_temp, mel_pres)
plt.plot(temperature_fit, pressure_fit)
#plt.plot(vptemp, vppres)
plt.plot(temp1, pres)
plt.yscale('log')